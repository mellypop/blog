{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site is mainly intended to host my blog.</p>"},{"location":"#socials","title":"Socials","text":"<ul> <li> @mellypop.gay</li> <li> mellypop</li> <li> mellypop_lollypop</li> </ul>"},{"location":"blog/","title":"Blog","text":""},{"location":"blog/2024/02/09/an-opt-in-hug-command/","title":"An Opt-In Hug Command","text":"<p>Hugging can be super common in chats, but not everyone is comfortable with or wants to be hugged, so I\u2019ve put together this set of commands to let people opt-in to hugs if they want them.</p> <p>The way this works is that I have created a special currency that I named huggable in MixItUp:</p> <p></p> <p>This currency has a max amount of 1 just so that keeping up with it is a bit easier for me. It is important to set the Online Rate to disabled because we do not want anyone to accidentally be marked as huggable.</p> <p>When you hit the save button the first time, MixItUp will ask you if you want it to automatically create commands for it. Since this is a special currency that will function differently from most others, I recommend saying \u201cNo\u201d.</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/09/an-opt-in-hug-command/#the-commands","title":"The Commands","text":"<p>There are three commands that we need to have this working: !huggable,!nohugs, and !hug . !huggable is the command that we will use to let a person agree to receiving hugs. It will give the person 1 huggable, which we can check for when someone uses the !hug command. My !huggable command looks like this: <p></p> <p>The first thing this command does is to give the user who used the command 1 huggable. It then sends a chat message to let people know that this person wants to be hugged.</p> <p>Next, we want someone who said they were okay with hugs to be able to turn that off, which is where the !nohugs command comes in! This resets the person\u2019s huggable inventory to 0 and sends a chat message to ask everyone to avoid hugging them. My command looks like this:</p> <p></p> <p>The third and final command is a tiny bit more complicated because we have to check if the person being hugged wants to be hugged. My !hug command looks like this:</p> <p></p> <p>The first part of this command checks to see if the person being hugged wants to be hugged. $targetuserhuggable will be 1 if the person wants to be hugged and 0 if they do not want to be hugged. I have the condition for this set to $targetuserhuggable &lt; 1, mainly because I want to avoid someone somehow having a negative huggable amount (which I don\u2019t think is actually possible) being hugged.</p> <p>If a person does not wish to be hugged, I send a chat message letting the person who tried to hug them know that they do not want to be hugged. The full text of this chat message in my command is \u201c@$targetusername has not marked themselves as huggable, so they can\u2019t be hugged! (Pssssst, you can mark yourself huggable using the !huggable command)\u201d. I may remove the reminder about the !huggable command later because I don\u2019t want this message to feel like it is pressuring anyone to be huggable.</p> <p>After we send the chat message, I use the Command action to \u201cExit Current Command\u201d which just means that MixItUp will stop there and not continue. This makes it so that I do not need another Conditional Action. If a person is not accepting hugs, the command ends here and does not proceed to the last chat message.</p> <p>And finally, outside of the Conditional action, I have a chat message action. This is where the person gets hugged if they want to be. The chat message here is pretty simple, so feel free to change the text to whatever makes sense for you!</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/07/mixitup-multi-pet-command/","title":"MixItUp Multi-Pet Command","text":"<p>So, we have 3 cats as of the time I\u2019m writing this post, and I wanted to have a !pet command that could pet them all at once or individually. This seems to be different to how many !pet commands are set up because it can accept 0-n arguments (where n is the number of pets to choose from).</p> <p>I will break this guide up into a two main parts: Action Groups and the Command.</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/07/mixitup-multi-pet-command/#action-groups","title":"Action Groups","text":"<p>I have one Action Group for each pet that the Command will use. I chose to use Action Groups now because it gives me the ability to re-use the individual pet actions anywhere else I may want them, but I originally created them because my first draft of this command was repeating the pet actions in multiple places, which can be a hassle to update each time. I have since simplified this, but feel free to put this logic into the Command itself. The process will be the same either way.</p> <p>These Action Groups have two main steps: update the counter and send a message to chat. I have a counter for each of our cats: $felixPets, $roryPets, and $SerenityPets to keep track of how many times each of them has been pet, but this is optional if you do not wish to keep track. As for the chat message, it can be anything you like. I\u2019ve gone with something simple, which can be seen in this screenshot:</p> <p></p> <p>I\u2019ve put this Action Group inside a Pet Cats Command Group, but that is more for keeping MixItUp organized than it is for function. Again, you will need to create one of these for each pet.</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/07/mixitup-multi-pet-command/#the-command","title":"The Command","text":"<p>This is the most complicated part because there is a lot going on. We need to be able to check for the names of the cats and generate a random number if no names are included.</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/07/mixitup-multi-pet-command/#checking-for-cat-names","title":"Checking for Cat Names","text":"<p>For the first section, we need to check to see if any of the cats\u2019 names have been added as arguments to the command. I do this using a Conditional action. MixItUp has a helpful Special Identifier we can use here called $argcount. $argcount will be 0 if someone only types !pet, so this Conditional looks something like this:</p> <p></p> <p>If there are not any arguments ($argcount == 0), then what I do is generate a random number between 1 and 3 and store it in a Special Identifier named $catnum, which we will use very soon. This doesn\u2019t need to be globally usable and is not a math expression, so leave those options off. If you make this Special Identifier globally usable, the last value will be stored, so the next time the command is run, a cat might get an extra pet! The horror!</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/02/07/mixitup-multi-pet-command/#petting-the-kitties","title":"Petting the Kitties","text":"<p>So, now that we have a random number, we have to assign meanings to the options. In my case, 1 = Felix, 2 = Serenity, and 3 = Rory. So, for example, if our random number is 2, Serenity gets pet.</p> <p>You will need a Conditional Action for each of your pets, and to avoid having 2 or more Conditionals for each pet, these will be slightly more complicated. We need to check to see if the user entered the correct cat name and also check if $catnum has rolled the correct number for this cat. Serenity\u2019s Conditional looks like this:</p> <p></p> <p>It is very important that you set the Operator (the dropdown next to the Add Clause button) to OR because we want this to work if either someone has included the pet\u2019s name or if their number was rolled. If you do not change this, then no cat will bet pet at all! For the first value, we need to check for the pet\u2019s name. <code>$allargs</code> is useful for this because we can check if it contains the pet\u2019s name very easily. The second value to check is our $catnum random number. Since we chose the OR operator, if either of these things is true, then we will pet Serenity.</p> <p>If you have created an Action Group for each of your pets, the Action part of this should be pretty easy. It needs to call a Command. Set the Command Type to Action Group and select the correct command. Since this is the Conditional for Serenity, the command I\u2019ve chosen is the Pet Serenity one.</p> <p>Remember to create one of these Conditional Actions for each of your pets. They should be nearly identical except for the pet\u2019s name and the number we\u2019re looking for.</p> <p>And with that, you should be good to go! Make sure to test this command both with names included and without. Since the Conditionals for each pet are the most complicated part, if you run into issues, it\u2019s best to check there first.</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/2024/01/17/mixitup-pngtuber-roulette/","title":"MixItUp PNGTuber Roulette","text":"<p>Note</p> <p>These instructions are for an early version of the PNGTuber Roulette used in PerhapsSam's streams. I will put together a newer tutorial once I have worked out this issues with it. The new version uses MixItUp's timer widgets, which will allow showing countowns of time left for each PNGTuber.</p> <p>I was asked to set up a roulette to choose a random PNGTuber as a Twitch channel point redeem. After watching a couple YouTube tutorials on how to change a PNGTuber with MixItUp, I came up with something that works fairly well.</p> <p>The process here can be broken down into five basic steps: set a hotkey in your PNGTuber application, generate a random number, use that number to select a PNGTuber, wait for a set amount of time, and revert back to the default avatar.</p> <p>So first, we need a hotkey, and we need this because we will tell MixItUp to press this hotkey, which will change our PNGTuber to the one that was randomly selected. You will need one for your default avatar and one for each of the available options.</p> <p>I generally use veadotube mini, and a hotkey can be chosen by selecting the PNGTuber you want and hitting the set hotkey button on the top right (it looks like a keyboard key for the letter H).</p> <p>Once you have set all your hotkeys up, next you\u2019ll need to hop over to MixItUp to set up the Twitch channel point command. The way I have done this, I need a Conditional Action for each available PNGTuber, so for two options, the command looks something like this:</p> <p></p> <p>I\u2019ve used a counter to store the random number, but a Special Identifier action will also work here. MixItUp provides a helpful random number generator through its pre-existing Special Identifiers that looks something like this: <code>$randomnumber2</code>. You can replace 2 with the number of roulette options that you have, but this is what my Counter action looks like:</p> <p></p> <p>As you can see, I have named my counter randomtuber, and it can be accessed using $randomtuber wherever else you may need it.</p> <p>The next step is to set up a Conditional Action for each of your PNGTuber options. Like previously mentioned, I have two to choose from, but you may have more as needed. Now, the random number generator will generate a number between 1 and whatever number you have at the end, so the possible numbers for me are 1 and 2, so my first Conditional Action looks like this:</p> <p></p> <p>I\u2019ve set a unique chat message for each of the PNGTuber options as\u2002a sort of announcement, but that step is entirely optional. The important action connected to this Conditional Action is the Input(Keyboard &amp; Mouse) Action, which I am using to press one of the hotkeys I set earlier. Since the hotkey for this particular PNGTuber is Ctrl+Alt+Shift+2, my Input Action looks like this:</p> <p></p> <p>Feel free to use whichever key combinations suit you. I don\u2019t use these combinations for anything else, so they make sense for me, but maybe something different works better for you.</p> <p>The next two steps are optional if you do not want to switch back to a default PNGTuber, but if you have a PNGTuber you normally use and want to make sure that you turn back into yourself automatically, keep reading!</p> <p>The next to last step is the Wait Action, which lets you have MixItUp wait a certain number of seconds before moving on to the next Action. Since this Action does not have a lot of flexibility, I am not including a screenshot here, but put the number of seconds you wish to wait before changing back in. I have chosen 900 seconds as that feels like an appropriate amount of time to wait before changing back, but choose whatever makes sense for you.</p> <p>Finally, it is time to change back into your default PNGTuber. You can do this by using one final Input(Keyboard &amp; Mouse) Action that presses the hotkey you selected earlier for your default PNGTuber. In my case, that hotkey is Ctrl+Alt+Shift+1, so my action looks like this:</p> <p></p> <p>You can test this all by setting your wait time to something short like 5 seconds and running the command using the play button at the bottom of the Command Editor. Once you are satisfied that it is working, save the command, and you\u2019re good to go!</p>","tags":["miu","mix it up","streaming","tutorial","twitch"]},{"location":"blog/archive/2024/","title":"2024","text":""},{"location":"blog/category/mixitup/","title":"MixItUp","text":""},{"location":"blog/category/streaming/","title":"Streaming","text":""},{"location":"tags/","title":"Tags","text":""},{"location":"tags/#miu","title":"miu","text":"<ul> <li>An Opt-In Hug Command</li> <li>MixItUp Multi-Pet Command</li> <li>MixItUp PNGTuber Roulette</li> </ul>"},{"location":"tags/#mix-it-up","title":"mix it up","text":"<ul> <li>An Opt-In Hug Command</li> <li>MixItUp Multi-Pet Command</li> <li>MixItUp PNGTuber Roulette</li> </ul>"},{"location":"tags/#streaming","title":"streaming","text":"<ul> <li>An Opt-In Hug Command</li> <li>MixItUp Multi-Pet Command</li> <li>MixItUp PNGTuber Roulette</li> </ul>"},{"location":"tags/#tutorial","title":"tutorial","text":"<ul> <li>An Opt-In Hug Command</li> <li>MixItUp Multi-Pet Command</li> <li>MixItUp PNGTuber Roulette</li> </ul>"},{"location":"tags/#twitch","title":"twitch","text":"<ul> <li>An Opt-In Hug Command</li> <li>MixItUp Multi-Pet Command</li> <li>MixItUp PNGTuber Roulette</li> </ul>"}]}